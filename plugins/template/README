# 插件开发模板

本目录提供了插件开发的模板和最佳实践指南，帮助开发者快速创建符合系统规范的新插件。

## 目录结构

```
template/
├── __init__.py         # 包初始化文件
├── plugin_template.py  # 插件模板实现
└── README.md           # 本说明文档
```

## 插件开发流程

### 1. 创建插件基础文件

基于本模板创建新插件：

1. 创建新的插件目录，如 `plugins/my_plugin/`
2. 复制模板文件到新目录
3. 重命名文件并调整包结构

### 2. 实现插件接口

根据实际需求修改模板文件：

1. 将 `TemplatePlugin` 类重命名为你的插件类名
2. 实现所需的插件特定功能
3. 更新插件元数据和配置参数
4. 根据需要添加事件处理和资源管理逻辑

### 3. 插件注册

确保实现的插件可以被系统发现和加载：

1. 在 `create_plugin` 工厂方法中使用正确的插件类
2. 更新 `__init__.py` 导出正确的接口和类
3. 如果需要，更新 `plugins/__init__.py` 以包含新的插件类型

## 插件接口说明

每个插件必须实现 `PluginInterface` 接口，主要包括：

### 核心属性

- `id`: 插件唯一标识符
- `name`: 插件名称
- `version`: 插件版本
- `description`: 插件描述

### 生命周期方法

- `initialize(context)`: 初始化插件，加载资源和设置
- `enable()`: 启用插件功能
- `disable()`: 禁用插件功能
- `configure(config)`: 更新插件配置
- `cleanup()`: 清理插件资源

### 辅助方法

- `is_initialized()`: 检查插件是否已初始化
- `is_enabled()`: 检查插件是否已启用
- `get_dependencies()`: 获取插件依赖项列表

## 插件特定接口

除了基本接口外，根据插件类型可能需要实现特定接口：

1. **检测器插件**：实现 `DetectorPluginInterface`
   - `detect_person(frame)`: 在图像中检测人体

2. **识别器插件**：实现 `RecognizerPluginInterface`
   - `recognize_action(detection_data)`: 识别动作

3. **映射器插件**：实现 `MapperPluginInterface`
   - `map_position(detection_data)`: 映射位置坐标

4. **可视化器插件**：实现 `VisualizerPluginInterface`
   - `visualize_frame(frame, person, action)`: 可视化相机帧
   - `visualize_room(position, depth, action)`: 可视化房间位置

5. **工具插件**：实现 `ToolPluginInterface`
   - 根据工具功能定义特定方法

## 事件系统集成

插件可以通过事件系统与其他组件交互：

```python
# 订阅事件
self._event_system.subscribe("event_name", self._event_handler)

# 发布事件
self._event_system.publish("event_name", {"key": "value"})
```

## 最佳实践

1. **错误处理**：使用 try-except 块捕获所有可能的异常
2. **日志记录**：使用系统提供的日志器记录操作和错误
3. **资源管理**：在初始化和清理时正确管理资源
4. **配置校验**：验证和安全处理配置参数
5. **线程安全**：确保方法在多线程环境中安全
6. **性能优化**：对于CPU密集型操作进行优化
7. **依赖管理**：正确声明和管理插件依赖关系

## 示例扩展

### 自定义特定功能插件

```python
class MySpecialPlugin(PluginInterface):
    def __init__(self, plugin_id="my_plugin", plugin_config=None):
        # 插件初始化
        self._id = plugin_id
        self._config = plugin_config or {}
        # ...

    # 实现必要的接口方法
    # ...

    # 添加自定义方法
    def my_special_function(self, data):
        # 自定义功能实现
        return processed_data
```

## 测试与验证

开发插件时建议：

1. 编写单元测试验证各个方法的功能
2. 测试不同配置下的插件行为
3. 验证插件与系统的集成效果
4. 测试错误处理和异常情况
5. 检查资源使用和性能影响

## 疑难解答

如果遇到问题，请检查：

- 是否正确实现了所有必要的接口方法
- 初始化方法是否正确处理了上下文和依赖
- 事件订阅和发布是否正确
- 日志中是否有错误或警告信息
- 清理方法是否正确释放了所有资源

## 相关文档

- [核心接口文档](../core/README.md)
- [事件系统文档](../core/event_bus.md)
- [系统架构概览](../../docs/architecture.md)
